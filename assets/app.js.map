{
  "version": 3,
  "file": "app.js",
  "sources": [
    "tmp/transpiled/app/adapters/application.js",
    "tmp/transpiled/app/app.js",
    "tmp/transpiled/app/controllers/todo.js",
    "tmp/transpiled/app/controllers/todos.js",
    "tmp/transpiled/app/models/todo.js",
    "tmp/transpiled/app/router.js",
    "tmp/transpiled/app/routes/todos.js",
    "tmp/transpiled/app/routes/todos/active.js",
    "tmp/transpiled/app/routes/todos/completed.js",
    "tmp/transpiled/app/routes/todos/index.js",
    "tmp/transpiled/app/utils/register_components.js",
    "tmp/transpiled/app/utils/setup_eidb.js",
    "tmp/transpiled/app/views/edit_todo.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"appkit/adapters/application\",\n  [],\n  function() {\n    \"use strict\";\n    var EIDBRecordAdapter = DS.Adapter.extend({\n      find: function(store, type, id) {\n        return this.request(type, 'getRecord', Number(id)).then(function(record) {\n          if (record) {\n            record.id = record[type.idAttr];\n            return record;\n          }\n\n          throw 'Record not found';\n        });\n      },\n\n      findQuery: function(store, type, query) {\n        var self = this;\n\n        return this.request(type, 'find', query).then(function(records) {\n          return self.mapIds(type, records);\n        });\n      },\n\n      createRecord: function(store, type, record) {\n        var json = record.toJSON();\n\n        return this.request(type, 'addRecord', json).then(function(id) {\n          json.id = id;\n          return json;\n        });\n      },\n\n      updateRecord: function(store, type, record) {\n        var json = record.toJSON(),\n            key = record.id;\n\n        return this.request(type, 'putRecord', json, Number(key)).then(function(id) {\n          json.id = id;\n          return json;\n        });\n      },\n\n      deleteRecord: function(store, type, record) {\n        var key = record.id;\n        return this.request(type, 'deleteRecord', Number(key));\n      },\n\n      findAll: function(store, type) {\n        var self = this;\n\n        return this.request(type, 'getAll').then(function(records) {\n          if (!records) { return []; }\n          return self.mapIds(type, records);\n        });\n      },\n\n      request: function(type, method) {\n        var dbName = type.dbName,\n            storeName = type.storeName || this.storeNameForType(type),\n            idAttr = type.idAttr,\n            reqArgs = [].slice.call(arguments, 2),\n            fullArgs = [dbName, storeName].concat(reqArgs);\n\n        return EIDB[method].apply(EIDB, fullArgs);\n      },\n\n      mapIds: function(type, records) {\n        return records.map(function(record) {\n          record.id = record[type.idAttr];\n          return record;\n        });\n      },\n\n      storeNameForType: function(type) {\n        return Ember.String.pluralize(type.typeKey);\n      }\n    });\n\n\n    return EIDBRecordAdapter;\n  });",
    "define(\"appkit/app\",\n  [\"resolver\",\"appkit/utils/register_components\",\"appkit/views/edit_todo\",\"appkit/utils/setup_eidb\"],\n  function(Resolver, registerComponents, editTodoView, setupEIDB) {\n    \"use strict\";\n\n    var App = Ember.Application.extend({\n      LOG_ACTIVE_GENERATION: true,\n      LOG_MODULE_RESOLVER: true,\n      LOG_TRANSITIONS: true,\n      LOG_TRANSITIONS_INTERNAL: true,\n      LOG_VIEW_LOOKUPS: true,\n      modulePrefix: 'appkit', // TODO: loaded via config\n      Resolver: Resolver\n    });\n\n    App.initializer({\n      name: 'Register Components',\n      initialize: function(container, application) {\n        registerComponents(container);\n      }\n    });\n\n    App.initializer({\n      name: 'Setup EasyIndexedDB',\n      initialize: function(container, application) {\n        setupEIDB();\n      }\n    });\n\n    Ember.Handlebars.helper('edit-todo', editTodoView);\n\n\n    return App;\n  });",
    "define(\"appkit/controllers/todo\",\n  [],\n  function() {\n    \"use strict\";\n    // controllers/todo.js\n    var TodoController = Ember.ObjectController.extend({\n      isCompleted: function(key, value){\n        var model = this.get('model');\n\n        if (arguments.length === 2) {\n          // property being used as a setter\n          model.set('isCompleted', value);\n          model.save();\n          return value;\n       } else {\n          // property being used as a getter\n          return model.get('isCompleted');\n        }\n      }.property('model.isCompleted'),\n\n      isEditing: false,\n\n      actions: {\n        editTodo: function () {\n          this.set('isEditing', true);\n        },\n        removeTodo: function () {\n          var todo = this.get('model');\n          todo.deleteRecord();\n          todo.save();\n        },\n        acceptChanges: function () {\n          this.set('isEditing', false);\n          this.get('model').save();\n        }\n      }\n    });\n\n\n    return TodoController;\n  });",
    "define(\"appkit/controllers/todos\",\n  [],\n  function() {\n    \"use strict\";\n    // controllers/todos.js\n\n    var isEmpty  = Ember.isEmpty;\n    var filterBy = Ember.computed.filterBy;\n    var notEmpty = Ember.computed.notEmpty;\n\n    var TodosController = Ember.ArrayController.extend({\n      active:    filterBy('[]', 'isCompleted', false),\n      completed: filterBy('[]', 'isCompleted', true),\n      hasCompleted: notEmpty('completed.[]'),\n\n      inflection: function () {\n        var active = this.get('active.length');\n        return active === 1 ? 'item' : 'items';\n      }.property('active.[]'),\n\n      allAreDone: function (key, value) {\n        if (arguments.length === 2) {\n          this.setEach('isCompleted', value);\n          this.invoke('save');\n          return value;\n        } else {\n          return !isEmpty(this) && this.everyProperty('isCompleted', true);\n        }\n      }.property('@each.isCompleted'),\n\n      actions: {\n        createTodo: function () {\n          // Get the todo title set by the \"New Todo\" text field\n          var title = this.get('newTitle');\n          if (!title.trim()) { \n            this.set('newTitle', \"\"); \n            return; \n          }\n\n          // Create the new Todo model\n          var todo = this.store.createRecord('todo', {\n            title: title,\n            isCompleted: false\n          });\n\n          // Clear the \"New Todo\" text field\n          this.set('newTitle', '');\n\n          // Save the new model\n          todo.save();\n        },\n        clearCompleted: function () {\n          var completed = this.filterProperty('isCompleted', true);\n          completed.invoke('deleteRecord');\n          completed.invoke('save');\n        }\n      }\n    });\n\n\n    return TodosController;\n  });",
    "define(\"appkit/models/todo\",\n  [],\n  function() {\n    \"use strict\";\n    // models/todo.js\n    var Todo = DS.Model.extend({\n      title: DS.attr('string'),\n      isCompleted: DS.attr('boolean')\n    });\n\n    Todo.reopenClass({\n      dbName: 'EAK_Todos',\n      storeName: 'todos',\n      idAttr: '_key'\n    });\n\n\n    return Todo;\n  });",
    "define(\"appkit/router\",\n  [],\n  function() {\n    \"use strict\";\n    var Router = Ember.Router.extend(); // ensure we don't share routes between all Router instances\n\n    Router.map(function(){\n      this.resource('todos', { path: '/' }, function() {\n        // additional child routes\n        this.route('active');\n        this.route('completed');\n      });\n    });\n\n\n    return Router;\n  });",
    "define(\"appkit/routes/todos\",\n  [],\n  function() {\n    \"use strict\";\n    // routes/todos.js\n    var TodosRoute = Ember.Route.extend({\n      model: function() {\n        return this.store.find('todo');\n      }\n    });\n\n\n    return TodosRoute;\n  });",
    "define(\"appkit/routes/todos/active\",\n  [],\n  function() {\n    \"use strict\";\n    // routes/todos/active.js\n    var TodosActiveRoute = Ember.Route.extend({\n      model: function(){\n        return this.store.filter('todo', function (todo) {\n          return !todo.get('isCompleted');\n        });\n      },\n      renderTemplate: function(controller){\n        this.render('todos/index', {controller: controller});\n      }\n    });\n\n\n    return TodosActiveRoute;\n  });",
    "define(\"appkit/routes/todos/completed\",\n  [],\n  function() {\n    \"use strict\";\n    // routes/todos/completed.js\n\n    var TodosCompletedRoute = Ember.Route.extend({\n      model: function(){\n        return this.store.filter('todo', function (todo) {\n          return todo.get('isCompleted');\n        });\n      },\n      renderTemplate: function(controller){\n        this.render('todos/index', { controller: controller });\n      }\n    });\n\n\n    return TodosCompletedRoute;\n  });",
    "define(\"appkit/routes/todos/index\",\n  [],\n  function() {\n    \"use strict\";\n    // routes/todos/index.js\n    var TodosIndexRoute = Ember.Route.extend({\n      model: function() {\n        return this.modelFor('todos');\n      }\n    });\n\n\n    return TodosIndexRoute;\n  });",
    "define(\"appkit/utils/register_components\",\n  [],\n  function() {\n    \"use strict\";\n    /* global requirejs */\n    /* global require */\n\n    function registerComponents(container) {\n      var seen = requirejs._eak_seen;\n      var templates = seen, match;\n      if (!templates) { return; }\n\n      for (var prop in templates) {\n        if (match = prop.match(/templates\\/components\\/(.*)$/)) {\n          require(prop, null, null, true);\n          registerComponent(container, match[1]);\n        }\n      }\n    }\n\n\n    function registerComponent(container, name) {\n      Ember.assert(\"You provided a template named 'components/\" + name + \"', but custom components must include a '-'\", name.match(/-/));\n\n      var fullName         = 'component:' + name,\n          templateFullName = 'template:components/' + name;\n\n      container.injection(fullName, 'layout', templateFullName);\n\n      var Component = container.lookupFactory(fullName);\n\n      if (!Component) {\n        container.register(fullName, Ember.Component);\n        Component = container.lookupFactory(fullName);\n      }\n\n      Ember.Handlebars.helper(name, Component);\n    }\n\n\n    return registerComponents;\n  });",
    "define(\"appkit/utils/setup_eidb\",\n  [],\n  function() {\n    \"use strict\";\n    var dbName = 'EAK_Todos',\n        storeName = 'todos';\n\n    function setupEIDB() {\n      EIDB.open(dbName).then(function(db) {\n        if (!db.hasObjectStore(storeName)) {\n          EIDB.createObjectStore(dbName, storeName).then(function() {\n\n            // The following is a workaround for bug when using IndexedDBShim in Safari\n            // (first record, that has id of 0, can't be updated)\n            return EIDB.addRecord(dbName, storeName, {});\n          }).then(function(id) {\n            EIDB.deleteRecord(dbName, storeName, id);\n          });\n        }\n      });\n    }\n\n\n    return setupEIDB;\n  });",
    "define(\"appkit/views/edit_todo\",\n  [],\n  function() {\n    \"use strict\";\n    // views/edit_todo.js\n    var EditTodoView = Ember.TextField.extend({\n      didInsertElement: function() {\n        this.$().focus();\n      }\n    });\n\n    return EditTodoView;\n  });"
  ]
}